#include "stdafx.h"
#include "DiaryWorkspace.h"

#include "RapidXML\rapidxml.hpp"
#include "RapidXML\rapidxml_print.hpp"



DiaryWorkspace::DiaryWorkspace()
{
}


DiaryWorkspace::~DiaryWorkspace()
{
}

bool DiaryWorkspace::Load(const std::string & path)
{
	return false;
}

bool DiaryWorkspace::Save(const std::string & path)
{
	std::ofstream f(path);
	if (!f.good()) return false;
	rapidxml::xml_document<> result;

	result.append_node(result.allocate_node(rapidxml::node_type::node_comment, "", "Auto-generated by Diary Editor, do not modify!"));
	rapidxml::xml_node<> *workspaceN = result.allocate_node(rapidxml::node_type::node_element, "workspace");
	for (int i = 0; i < floors.size(); i++)
	{
		rapidxml::xml_node<> *floorN = result.allocate_node(rapidxml::node_type::node_element, "floor");
		rapidxml::xml_attribute<> *floorAName = result.allocate_attribute("name", floors[i]->name.c_str());
		rapidxml::xml_attribute<> *floorAScriptName = result.allocate_attribute("script-name", floors[i]->scriptName.c_str());	
		static char sID[64];
		itoa(floors[i]->style, sID, 10);
		char * sPtr = result.allocate_string(sID);
		rapidxml::xml_attribute<> *floorAStyleID = result.allocate_attribute("style", sPtr);
		floorN->append_attribute(floorAName);
		floorN->append_attribute(floorAScriptName);
		floorN->append_attribute(floorAStyleID);
		for (int o = 0; o < floors[i]->Levels.size(); o++)
		{
			rapidxml::xml_node<> *levelN = result.allocate_node(rapidxml::node_type::node_element, "level");
			rapidxml::xml_attribute<> *levelAName = result.allocate_attribute("name", floors[i]->Levels[o]->name.c_str());
			rapidxml::xml_attribute<> *levelAScriptName = result.allocate_attribute("script-name", floors[i]->Levels[o]->scriptName.c_str());
			rapidxml::xml_attribute<> *levelAOverrideFloorStyle = result.allocate_attribute("override-floor-style", floors[i]->Levels[o]->overrrideFloorStyle ? "1" : "0");
			static char lsID[64];
			itoa(floors[i]->Levels[o]->style, lsID, 10);
			char * lsPtr = result.allocate_string(lsID);
			rapidxml::xml_attribute<> *levelAStyleID = result.allocate_attribute("style", lsID);

			levelN->append_attribute(levelAName);
			levelN->append_attribute(levelAScriptName);
			levelN->append_attribute(levelAOverrideFloorStyle);
			levelN->append_attribute(levelAStyleID);

			floorN->append_node(levelN);
		}
		workspaceN->append_node(floorN);
	}
	result.append_node(workspaceN);

	f << result;
	
	f.close();
	return true;
}

int DiaryWorkspace::GetFloorCount()
{
	return floors.size();
}

const char * DiaryWorkspace::GetFloorName(int index)
{
	if(index >= floors.size() || index < 0)
		return 0;
	return floors[index]->GetUIFriendlyName();
}

DiaryFloor * DiaryWorkspace::GetCurrentFloor()
{
	if (isValidFloor(currentFloor)) return floors[currentFloor];
	return NULL;
}

int DiaryWorkspace::GetLevelCount()
{
	if (!isValidFloor(currentFloor)) return 0;
	return floors[currentFloor]->Levels.size();
}

const char * DiaryWorkspace::GetLevelName(int index)
{
	if (isValidFloor(currentFloor))
	{
		if (isValidLevel(index))
		{
			return floors[currentFloor]->Levels[index]->GetUIFriendlyName();
		}
	}
	else {
		return 0;
	}
	return 0;
}

DiaryLevel * DiaryWorkspace::GetCurrentLevel()
{
	if (isValidFloor(currentFloor) && isValidLevel(currentLevel)) return floors[currentFloor]->Levels[currentLevel];
	return NULL;
}

void DiaryWorkspace::AddFloor(const char * sname, const char * name)
{
	DiaryFloor * f = new DiaryFloor();
	f->name = name;
	f->scriptName = sname;
	floors.push_back(f);
}

bool DiaryWorkspace::isValidFloor(int index)
{
	if(index >= floors.size() || index < 0)
		return false;
	if (floors.size() <= 0)
		return false;
	return true;
}

bool DiaryWorkspace::isValidLevel(int index)
{
	if (!isValidFloor(currentFloor)) return false;
	if (index >= floors[currentFloor]->Levels.size() || index < 0)
		return false;
	if (floors[currentFloor]->Levels.size() <= 0)
		return false;
	return true;
}

void DiaryWorkspace::RemoveFloorAtIndex(int index)
{
	if (!isValidFloor(index)) return;
	DiaryFloor *floor = floors[index];
	
	free(floor);
	floors.erase(floors.begin() + index);
}

void DiaryWorkspace::RemoveLevelAtIndex(int index)
{
	if (!isValidFloor(currentFloor) || !isValidLevel(index)) return;
	DiaryLevel *level = floors[currentFloor]->Levels[index];

	free(level);
	floors[currentFloor]->Levels.erase(floors[currentLevel]->Levels.begin() + index);
}

void DiaryWorkspace::AddLevel(const char * sname, const char * name)
{
	DiaryLevel *level = new DiaryLevel();
	level->scriptName = sname;
	level->name = name;
	floors[currentFloor]->Levels.push_back(level);
}
